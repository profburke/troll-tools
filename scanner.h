#ifndef tvm_scanner_h
#define tvm_scanner_h

typedef enum {
  // Single character tokens
  TOKEN_DIE, TOKEN_ZERO_DIE, TOKEN_UNION, TOKEN_PLUS,
  TOKEN_TIMES, TOKEN_DIVIDE, TOKEN_LPAREN, TOKEN_RPAREN,
  TOKEN_COMMA, TOKEN_SEMICOLON, TOKEN_LBRACE, TOKEN_RBRACE, TOKEN_TILDE,
  TOKEN_BANG, TOKEN_AND, TOKEN_HASH, TOKEN_QUESTION, TOKEN_SAMPLE, TOKEN_LBRACK, TOKEN_RBRACK,
  
  // One or two character tokens
  TOKEN_MINUS, TOKEN_SET_MINUS, TOKEN_ASSIGN, TOKEN_EQ, TOKEN_NEQ, TOKEN_LT, TOKEN_GT,
  TOKEN_LE, TOKEN_GE, TOKEN_DOT_DOT, TOKEN_HCONC, TOKEN_VCONCL, TOKEN_VCONCR, TOKEN_VCONCC,
  TOKEN_FIRST, TOKEN_SECOND,
  
  // Literals
  TOKEN_INTEGER, TOKEN_REAL, TOKEN_IDENTIFIER, TOKEN_STRING,
  
  // Keywords
  TOKEN_SUM, TOKEN_SGN, TOKEN_MOD, TOKEN_LEAST, TOKEN_LARGEST, TOKEN_COUNT, TOKEN_DROP, TOKEN_KEEP,
  TOKEN_PICK, TOKEN_MEDIAN, TOKEN_IN, TOKEN_REPEAT, TOKEN_ACCUMULATE, TOKEN_WHILE, TOKEN_UNTIL,
  TOKEN_FOREACH, TOKEN_DO, TOKEN_IF, TOKEN_THEN, TOKEN_ELSE, TOKEN_MIN, TOKEN_MAX, TOKEN_MINIMAL,
  TOKEN_MAXIMAL, TOKEN_CHOOSE, TOKEN_DIFFERENT, TOKEN_FUNCTION, TOKEN_CALL, TOKEN_COMPOSITIONAL,
  
  // Miscellaneous
  TOKEN_ERROR, TOKEN_EOF
} TokenType;

typedef struct {
  TokenType type;
  const char* start;
  int length;
  int line;
} Token;

void initScanner(const char* source);
Token scanToken();

#endif
